// Code generated by protoc-gen-go.
// source: jingoal/dfs/proto/discovery/discovery.proto
// DO NOT EDIT!

/*
Package discovery is a generated protocol buffer package.

It is generated from these files:
	jingoal/dfs/proto/discovery/discovery.proto

It has these top-level messages:
	DfsServer
	DfsServerList
	Heartbeat
	DfsClient
	GetDfsServersReq
	GetDfsServersRep
*/
package discovery

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type DfsServer_Status int32

const (
	DfsServer_ONLINE  DfsServer_Status = 0
	DfsServer_USED    DfsServer_Status = 1
	DfsServer_GOAWAY  DfsServer_Status = 2
	DfsServer_OFFLINE DfsServer_Status = 3
)

var DfsServer_Status_name = map[int32]string{
	0: "ONLINE",
	1: "USED",
	2: "GOAWAY",
	3: "OFFLINE",
}
var DfsServer_Status_value = map[string]int32{
	"ONLINE":  0,
	"USED":    1,
	"GOAWAY":  2,
	"OFFLINE": 3,
}

func (x DfsServer_Status) String() string {
	return proto.EnumName(DfsServer_Status_name, int32(x))
}

// Dfs Server
type DfsServer struct {
	Id     string           `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Uri    string           `protobuf:"bytes,2,opt,name=uri" json:"uri,omitempty"`
	Weight int32            `protobuf:"varint,3,opt,name=weight" json:"weight,omitempty"`
	Load   int32            `protobuf:"varint,4,opt,name=load" json:"load,omitempty"`
	Free   int64            `protobuf:"varint,5,opt,name=free" json:"free,omitempty"`
	Status DfsServer_Status `protobuf:"varint,6,opt,name=status,enum=discovery.DfsServer_Status" json:"status,omitempty"`
}

func (m *DfsServer) Reset()         { *m = DfsServer{} }
func (m *DfsServer) String() string { return proto.CompactTextString(m) }
func (*DfsServer) ProtoMessage()    {}

// DfsServerList represents a list of DfsServer.
type DfsServerList struct {
	Server []*DfsServer `protobuf:"bytes,1,rep,name=server" json:"server,omitempty"`
}

func (m *DfsServerList) Reset()         { *m = DfsServerList{} }
func (m *DfsServerList) String() string { return proto.CompactTextString(m) }
func (*DfsServerList) ProtoMessage()    {}

func (m *DfsServerList) GetServer() []*DfsServer {
	if m != nil {
		return m.Server
	}
	return nil
}

// Heartbeat represents a heartbeat message.
type Heartbeat struct {
	Timestamp int64 `protobuf:"varint,1,opt,name=timestamp" json:"timestamp,omitempty"`
}

func (m *Heartbeat) Reset()         { *m = Heartbeat{} }
func (m *Heartbeat) String() string { return proto.CompactTextString(m) }
func (*Heartbeat) ProtoMessage()    {}

// DfsClient represents client info.
type DfsClient struct {
	Id  string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Uri string `protobuf:"bytes,2,opt,name=uri" json:"uri,omitempty"`
}

func (m *DfsClient) Reset()         { *m = DfsClient{} }
func (m *DfsClient) String() string { return proto.CompactTextString(m) }
func (*DfsClient) ProtoMessage()    {}

// The message for DfsClient info.
type GetDfsServersReq struct {
	Client *DfsClient `protobuf:"bytes,1,opt,name=client" json:"client,omitempty"`
}

func (m *GetDfsServersReq) Reset()         { *m = GetDfsServersReq{} }
func (m *GetDfsServersReq) String() string { return proto.CompactTextString(m) }
func (*GetDfsServersReq) ProtoMessage()    {}

func (m *GetDfsServersReq) GetClient() *DfsClient {
	if m != nil {
		return m.Client
	}
	return nil
}

// The message for DfsServer.
type GetDfsServersRep struct {
	// Types that are valid to be assigned to GetDfsServerUnion:
	//	*GetDfsServersRep_Sl
	//	*GetDfsServersRep_Hb
	GetDfsServerUnion isGetDfsServersRep_GetDfsServerUnion `protobuf_oneof:"GetDfsServerUnion"`
}

func (m *GetDfsServersRep) Reset()         { *m = GetDfsServersRep{} }
func (m *GetDfsServersRep) String() string { return proto.CompactTextString(m) }
func (*GetDfsServersRep) ProtoMessage()    {}

type isGetDfsServersRep_GetDfsServerUnion interface {
	isGetDfsServersRep_GetDfsServerUnion()
}

type GetDfsServersRep_Sl struct {
	Sl *DfsServerList `protobuf:"bytes,1,opt,name=sl,oneof"`
}
type GetDfsServersRep_Hb struct {
	Hb *Heartbeat `protobuf:"bytes,2,opt,name=hb,oneof"`
}

func (*GetDfsServersRep_Sl) isGetDfsServersRep_GetDfsServerUnion() {}
func (*GetDfsServersRep_Hb) isGetDfsServersRep_GetDfsServerUnion() {}

func (m *GetDfsServersRep) GetGetDfsServerUnion() isGetDfsServersRep_GetDfsServerUnion {
	if m != nil {
		return m.GetDfsServerUnion
	}
	return nil
}

func (m *GetDfsServersRep) GetSl() *DfsServerList {
	if x, ok := m.GetGetDfsServerUnion().(*GetDfsServersRep_Sl); ok {
		return x.Sl
	}
	return nil
}

func (m *GetDfsServersRep) GetHb() *Heartbeat {
	if x, ok := m.GetGetDfsServerUnion().(*GetDfsServersRep_Hb); ok {
		return x.Hb
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*GetDfsServersRep) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), []interface{}) {
	return _GetDfsServersRep_OneofMarshaler, _GetDfsServersRep_OneofUnmarshaler, []interface{}{
		(*GetDfsServersRep_Sl)(nil),
		(*GetDfsServersRep_Hb)(nil),
	}
}

func _GetDfsServersRep_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*GetDfsServersRep)
	// GetDfsServerUnion
	switch x := m.GetDfsServerUnion.(type) {
	case *GetDfsServersRep_Sl:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Sl); err != nil {
			return err
		}
	case *GetDfsServersRep_Hb:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Hb); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("GetDfsServersRep.GetDfsServerUnion has unexpected type %T", x)
	}
	return nil
}

func _GetDfsServersRep_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*GetDfsServersRep)
	switch tag {
	case 1: // GetDfsServerUnion.sl
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DfsServerList)
		err := b.DecodeMessage(msg)
		m.GetDfsServerUnion = &GetDfsServersRep_Sl{msg}
		return true, err
	case 2: // GetDfsServerUnion.hb
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Heartbeat)
		err := b.DecodeMessage(msg)
		m.GetDfsServerUnion = &GetDfsServersRep_Hb{msg}
		return true, err
	default:
		return false, nil
	}
}

func init() {
	proto.RegisterEnum("discovery.DfsServer_Status", DfsServer_Status_name, DfsServer_Status_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for DiscoveryService service

type DiscoveryServiceClient interface {
	// GetDfsServers returns a list of DfsServer.
	GetDfsServers(ctx context.Context, in *GetDfsServersReq, opts ...grpc.CallOption) (DiscoveryService_GetDfsServersClient, error)
}

type discoveryServiceClient struct {
	cc *grpc.ClientConn
}

func NewDiscoveryServiceClient(cc *grpc.ClientConn) DiscoveryServiceClient {
	return &discoveryServiceClient{cc}
}

func (c *discoveryServiceClient) GetDfsServers(ctx context.Context, in *GetDfsServersReq, opts ...grpc.CallOption) (DiscoveryService_GetDfsServersClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_DiscoveryService_serviceDesc.Streams[0], c.cc, "/discovery.DiscoveryService/GetDfsServers", opts...)
	if err != nil {
		return nil, err
	}
	x := &discoveryServiceGetDfsServersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DiscoveryService_GetDfsServersClient interface {
	Recv() (*GetDfsServersRep, error)
	grpc.ClientStream
}

type discoveryServiceGetDfsServersClient struct {
	grpc.ClientStream
}

func (x *discoveryServiceGetDfsServersClient) Recv() (*GetDfsServersRep, error) {
	m := new(GetDfsServersRep)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for DiscoveryService service

type DiscoveryServiceServer interface {
	// GetDfsServers returns a list of DfsServer.
	GetDfsServers(*GetDfsServersReq, DiscoveryService_GetDfsServersServer) error
}

func RegisterDiscoveryServiceServer(s *grpc.Server, srv DiscoveryServiceServer) {
	s.RegisterService(&_DiscoveryService_serviceDesc, srv)
}

func _DiscoveryService_GetDfsServers_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetDfsServersReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DiscoveryServiceServer).GetDfsServers(m, &discoveryServiceGetDfsServersServer{stream})
}

type DiscoveryService_GetDfsServersServer interface {
	Send(*GetDfsServersRep) error
	grpc.ServerStream
}

type discoveryServiceGetDfsServersServer struct {
	grpc.ServerStream
}

func (x *discoveryServiceGetDfsServersServer) Send(m *GetDfsServersRep) error {
	return x.ServerStream.SendMsg(m)
}

var _DiscoveryService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "discovery.DiscoveryService",
	HandlerType: (*DiscoveryServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetDfsServers",
			Handler:       _DiscoveryService_GetDfsServers_Handler,
			ServerStreams: true,
		},
	},
}
